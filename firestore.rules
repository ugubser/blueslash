rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can only read/write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Household access rules
    match /households/{householdId} {
      // Users can read household data if they're a member
      allow read: if request.auth != null 
        && request.auth.uid in resource.data.members;
      
      // Only the head of household can create/update household data
      allow write: if request.auth != null 
        && (
          // Creating new household (user becomes head)
          (resource == null && request.auth.uid == request.resource.data.headOfHousehold)
          ||
          // Updating existing household (must be head or adding self as member)
          (resource != null && (
            request.auth.uid == resource.data.headOfHousehold
            ||
            // Allow users to add themselves to members list via invite
            (
              request.auth.uid in request.resource.data.members 
              && request.auth.uid not in resource.data.members
              && request.resource.data.members.size() == resource.data.members.size() + 1
            )
          ))
        );
    }
    
    // Task access rules
    match /tasks/{taskId} {
      // Users can read tasks if they're in the household
      allow read: if request.auth != null 
        && request.auth.uid in get(/databases/$(database)/documents/households/$(resource.data.householdId)).data.members;
      
      // Users can create tasks in their household
      allow create: if request.auth != null 
        && request.auth.uid in get(/databases/$(database)/documents/households/$(request.resource.data.householdId)).data.members
        && request.auth.uid == request.resource.data.creatorId;
      
      // Users can update tasks in their household with restrictions
      allow update: if request.auth != null 
        && request.auth.uid in get(/databases/$(database)/documents/households/$(resource.data.householdId)).data.members
        && (
          // Task creator can always update their own tasks
          request.auth.uid == resource.data.creatorId
          ||
          // Any household member can claim available tasks
          (
            resource.data.status == 'published' 
            && request.resource.data.status == 'claimed'
            && request.resource.data.claimedBy == request.auth.uid
          )
          ||
          // Claimed user can mark their tasks as completed
          (
            resource.data.claimedBy == request.auth.uid
            && resource.data.status == 'claimed'
            && request.resource.data.status == 'completed'
          )
          ||
          // Any household member can verify completed tasks (not their own)
          (
            resource.data.status == 'completed'
            && resource.data.claimedBy != request.auth.uid
            && request.resource.data.verifications != null
          )
          ||
          // System updates for status changes (verified, etc.)
          (
            resource.data.status == 'completed'
            && request.resource.data.status == 'verified'
          )
        );
      
      // Users can delete their own draft tasks or heads can delete any
      allow delete: if request.auth != null 
        && (
          // Creator can delete their own drafts
          (request.auth.uid == resource.data.creatorId && resource.data.status == 'draft')
          ||
          // Head of household can delete any task
          request.auth.uid == get(/databases/$(database)/documents/households/$(resource.data.householdId)).data.headOfHousehold
        );
    }
    
    // Gem transactions are read-only for users, write-only for system
    match /gemTransactions/{transactionId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
